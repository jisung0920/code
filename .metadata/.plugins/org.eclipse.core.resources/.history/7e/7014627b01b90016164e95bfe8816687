package tree;


public class BST {
	private Node root=null;
	
	private class Node{
		private int key;
		private Node left_child;
		private Node right_child;
		private Node parent;
		Node(int key){
			this.key = key;
			this.left_child=null;
			this.right_child=null;
			this.parent = null;

		}
	}
	
	public void insert(int key){
		Node nNode = new Node(key);
		if(root == null){
			root =nNode;
			return ;
		}


	}
	public void delete(int key){

		
	}
	

	public Node search(int key){
		if(root==null){
			System.out.println("empty node");
			return null;
		}
		Node cur=root;
		while(true){
			if(cur==null){
				System.out.println("is not exist");
				return null;
			}
			else if(cur.key == key)
				return cur;
			else if(cur.key>key){
				cur =cur.right_child;
			}
			else{
				cur = cur.left_child;
			}
		}
	}
	public void printPreorder(Node node){
		if(node == null)
			return ;
		System.out.print("["+node.key+"]");
		printPreorder(node.left_child);
		printPreorder(node.right_child);
		
	}
	public void printInorder(Node node){
		if(node == null)
			return;
		printInorder(node.left_child);
		System.out.print("["+node.key+"]");	
		printInorder(node.right_child);
	}
	public void printPostorder(Node node){
		if(node == null)
			return;
		printPostorder(node.left_child);
		System.out.print("["+node.key+"]");
		printPostorder(node.right_child);
	}
	public Node getRoot(){
		return root;
	}
	public boolean childEmpty(Node node){
		if(node.left_child == null && node.right_child==null)
			return true;
		else
			return false;
	}
}
